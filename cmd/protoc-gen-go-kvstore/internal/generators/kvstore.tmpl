{{- /*gotype: github.com/ehsundar/kvstore/cmd/protoc-gen-go-kvstore/internal/generators.kvstoreTemplateContext*/ -}}
// Code generated by protoc-gen-go-kvstore {{.GenVersion}}. DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/ehsundar/kvstore"
	"github.com/redis/go-redis/v9"
	"google.golang.org/protobuf/encoding/protojson"
)

{{range $_, $pairSpecs := .Pairs}}
{{$codeSafeName := $pairSpecs.CodeSafeName}}
// generated code for {{$codeSafeName}}
// storage interface

{{if or $pairSpecs.ValueSpecs.NumericInt $pairSpecs.ValueSpecs.NumericFloat}}
type {{$codeSafeName}}KVStore interface {
	Get(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}, ...kvstore.GetOption) ({{if $pairSpecs.ValueSpecs.NumericInt}}int64{{else}}float64{{end}}, error)
	Set(context.Context, *{{$pairSpecs.KeySpecs.MessageName}},
		{{if $pairSpecs.ValueSpecs.NumericInt}}int64{{else}}float64{{end}}, ...kvstore.SetOption) ({{if $pairSpecs.ValueSpecs.NumericInt}}int64{{else}}float64{{end}}, error)
	Del(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}) error
	{{if $pairSpecs.ValueSpecs.NumericInt}}Incr(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}, int64, ...kvstore.IncrOption) (int64, error){{end}}
	{{if $pairSpecs.ValueSpecs.NumericFloat}}Incr(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}, float64, ...kvstore.IncrOption) (float64, error){{end}}
}
{{else}}
type {{$codeSafeName}}KVStore interface {
	Get(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}, ...kvstore.GetOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error)
	Set(context.Context, *{{$pairSpecs.KeySpecs.MessageName}},
		*{{$pairSpecs.ValueSpecs.MessageName}}, ...kvstore.SetOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error)
	Del(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}) error
}
{{end}}

// storage construction

func New{{$codeSafeName}}Store(r redis.Cmdable, opts ...kvstore.InitOption) {{$codeSafeName}}KVStore {

	oc := kvstore.InitOptionContext{}
	for _, opt := range opts {
		opt(&oc)
	}

	return &{{$codeSafeName|untitle}}Storage{
		r:    r,
		opts: oc,
	}
}

// storage implementation

type {{$codeSafeName|untitle}}Storage struct {
	r    redis.Cmdable
	opts kvstore.InitOptionContext
}

{{if or $pairSpecs.ValueSpecs.NumericInt $pairSpecs.ValueSpecs.NumericFloat}}
func (s *{{$codeSafeName|untitle}}Storage) Get(
	ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}}, opts ...kvstore.GetOption) ({{if $pairSpecs.ValueSpecs.NumericInt}}int64{{else}}float64{{end}}, error) {

	var err error

	o := kvstore.GetOptionContext{}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return 0, err
	}

	var v string
	switch {
	case o.Del:
		v, err = s.r.GetDel(ctx, k).Result()
	case o.TTL != 0:
		v, err = s.r.GetEx(ctx, k, o.TTL).Result()
	case !o.ExAt.IsZero():
		// TODO: PR to go-redis for exAt
		err = errors.New("exat is not supported by go-redis")
	default:
		v, err = s.r.Get(ctx, k).Result()
	}

	if err != nil {
		return 0, err
	}

	{{if $pairSpecs.ValueSpecs.NumericInt}}
	return strconv.ParseInt(v, 10, 64)
	{{else}}
	return strconv.ParseFloat(v, 64)
	{{end}}
}
{{else}}
func (s *{{$codeSafeName|untitle}}Storage) Get(
	ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}}, opts ...kvstore.GetOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error) {

	var err error

	o := kvstore.GetOptionContext{}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	var v string
	switch {
	case o.Del:
		v, err = s.r.GetDel(ctx, k).Result()
	case o.TTL != 0:
		v, err = s.r.GetEx(ctx, k, o.TTL).Result()
	case !o.ExAt.IsZero():
		// TODO: PR to go-redis for exAt
		err = errors.New("exat is not supported by go-redis")
	default:
		v, err = s.r.Get(ctx, k).Result()
	}

	if err != nil {
		return nil, err
	}

	msg := &{{$pairSpecs.ValueSpecs.MessageName}}{}
	err = msg.unmarshal(v)
	if err != nil {
		return nil, err
	}

	return msg, nil
}
{{end}}

{{if or $pairSpecs.ValueSpecs.NumericInt $pairSpecs.ValueSpecs.NumericFloat}}
func (s *{{$codeSafeName|untitle}}Storage) Set(ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}},
	value {{if $pairSpecs.ValueSpecs.NumericInt}}int64{{else}}float64{{end}}, opts ...kvstore.SetOption) ({{if $pairSpecs.ValueSpecs.NumericInt}}int64{{else}}float64{{end}}, error) {

	o := kvstore.SetOptionContext{
		Get:     true,
		KeepTTL: true,
	}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return 0, err
	}

	mv:= fmt.Sprintf("%v", value)
	v, err := s.r.SetArgs(ctx, k, mv, redis.SetArgs{
		Mode:     o.Mode,
		TTL:      o.TTL,
		ExpireAt: o.ExAt,
		Get:      o.Get,
		KeepTTL:  o.KeepTTL,
	}).Result()
	if err != nil && !errors.Is(err, redis.Nil) {
		return 0, err
	}

	if v != "" && v != "OK" {
		{{if $pairSpecs.ValueSpecs.NumericInt}}
		return strconv.ParseInt(v, 10, 64)
		{{else}}
		return strconv.ParseFloat(v, 64)
		{{end}}
	}

	return 0, nil
}
{{else}}
func (s *{{$codeSafeName|untitle}}Storage) Set(ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}},
	value *{{$pairSpecs.ValueSpecs.MessageName}}, opts ...kvstore.SetOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error) {

	o := kvstore.SetOptionContext{
		Get:     true,
		KeepTTL: true,
	}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	mv, err := value.marshal()
	if err != nil {
		return nil, err
	}

	v, err := s.r.SetArgs(ctx, k, mv, redis.SetArgs{
		Mode:     o.Mode,
		TTL:      o.TTL,
		ExpireAt: o.ExAt,
		Get:      o.Get,
		KeepTTL:  o.KeepTTL,
	}).Result()
	if err != nil && !errors.Is(err, redis.Nil) {
		return nil, err
	}

	if v != "" && v != "OK" {
		msg := &{{$pairSpecs.ValueSpecs.MessageName}}{}
		err = msg.unmarshal(v)
		if err != nil {
			return nil, err
		}
		return msg, nil
	}

	return nil, nil
}
{{end}}

func (s *{{$codeSafeName|untitle}}Storage) Del(ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}}) error {

	k, err := key.marshal()
	if err != nil {
		return err
	}

	_, err = s.r.Del(ctx, k).Result()
	return err
}
{{if $pairSpecs.ValueSpecs.NumericInt}}
func (s *{{$codeSafeName|untitle}}Storage) Incr(ctx context.Context,
	key *{{$pairSpecs.KeySpecs.MessageName}}, by int64, opts ...kvstore.IncrOption) (int64, error) {

	o := kvstore.IncrOptionContext{}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return 0, err
	}

	v, err := s.r.IncrBy(ctx, k, by).Result()
	if err != nil {
		return 0, err
	}

	switch {
	case o.TTL != 0:
		if o.KeepTTL {
			_, err = s.r.ExpireNX(ctx, k, o.TTL).Result()
		} else {
			_, err = s.r.Expire(ctx, k, o.TTL).Result()
		}
	case !o.ExAt.IsZero():
		_, err = s.r.ExpireAt(ctx, k, o.ExAt).Result()
	}

	return v, err
}
{{end}}
{{if $pairSpecs.ValueSpecs.NumericFloat}}
func (s *{{$codeSafeName|untitle}}Storage) Incr(ctx context.Context,
	key *{{$pairSpecs.KeySpecs.MessageName}}, by float64, opts ...kvstore.IncrOption) (float64, error) {

	o := kvstore.IncrOptionContext{}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return 0, err
	}

	v, err := s.r.IncrByFloat(ctx, k, by).Result()
	if err != nil {
		return 0, err
	}

	switch {
	case o.TTL != 0:
		if o.KeepTTL {
			_, err = s.r.ExpireNX(ctx, k, o.TTL).Result()
		} else {
			_, err = s.r.Expire(ctx, k, o.TTL).Result()
		}
	case !o.ExAt.IsZero():
		_, err = s.r.ExpireAt(ctx, k, o.ExAt).Result()
	}

	return v, err
}
{{end}}
// message marshallers

func (msg *{{$pairSpecs.KeySpecs.MessageName}}) marshal() (string, error) {
	{{$keyfmt := $pairSpecs.KeySpecs.KeyFormat}}
	v := fmt.Sprintf("{{$keyfmt.Format}}"{{if $keyfmt.VarNames}}, {{end}}{{$keyfmt.VarNames|funcCallArgs "msg"}})

	return v, nil
}

func (msg *{{$pairSpecs.ValueSpecs.MessageName}}) marshal() (string, error) {
	v, err := protojson.MarshalOptions{}.Marshal(msg)
	if err != nil {
		return "", err
	}

	return string(v), nil
}

func (msg *{{$pairSpecs.ValueSpecs.MessageName}}) unmarshal(value string) error {
	return protojson.UnmarshalOptions{}.Unmarshal([]byte(value), msg)
}

{{end}}
