{{- /*gotype: github.com/ehsundar/kvstore.kvstoreTemplateContext*/ -}}
// Code generated by protoc-gen-kvstore. DO NOT EDIT.

package example

import (
	"context"
	"fmt"
	"time"

	"github.com/redis/go-redis/v9"
	"google.golang.org/protobuf/encoding/protojson"
)

{{range $codeSafeName, $pairSpecs := .Pairs}}
// generated code for {{$codeSafeName}}
// storage interface

type {{$codeSafeName}}KVStore interface {
	Get(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}, ...{{$codeSafeName}}CallOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error)
	Set(context.Context, *{{$pairSpecs.KeySpecs.MessageName}},
		*{{$pairSpecs.ValueSpecs.MessageName}}, ...{{$codeSafeName}}CallOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error)
	Delete(context.Context, *{{$pairSpecs.KeySpecs.MessageName}}) error
}

type {{$codeSafeName|untitle}}CallOptionContext struct{}

type {{$codeSafeName}}CallOption func(o *{{$codeSafeName|untitle}}CallOptionContext)

// storage construction

func New{{$codeSafeName}}Store(r *redis.Client, opts ...{{$codeSafeName|untitle}}Option) {{$codeSafeName}}KVStore {
	oc := {{$codeSafeName|untitle}}OptionContext{}

	for _, opt := range opts {
		opt(&oc)
	}

	return &{{$codeSafeName|untitle}}Storage{
		r:    r,
		opts: oc,
	}
}

type {{$codeSafeName|untitle}}OptionContext struct{}

type {{$codeSafeName|untitle}}Option func(o *{{$codeSafeName|untitle}}OptionContext)

// storage implementation

type {{$codeSafeName|untitle}}Storage struct {
	r    *redis.Client
	opts {{$codeSafeName|untitle}}OptionContext
}

func (s *{{$codeSafeName|untitle}}Storage) Get(
	ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}}, opts ...{{$codeSafeName}}CallOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error) {

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	v, err := s.r.Get(ctx, k).Result()
	if err != nil {
		return nil, err
	}

	msg := &{{$pairSpecs.ValueSpecs.MessageName}}{}
	err = msg.unmarshal(v)
	if err != nil {
		return nil, err
	}

	return msg, nil
}

func (s *featureXStorage) Set(ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}},
	value *{{$pairSpecs.ValueSpecs.MessageName}}, opts ...{{$codeSafeName}}CallOption) (*{{$pairSpecs.ValueSpecs.MessageName}}, error) {

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	mv, err := value.marshal()
	if err != nil {
		return nil, err
	}

	v, err := s.r.SetArgs(ctx, k, mv, redis.SetArgs{
		Mode:     "",
		TTL:      0,
		ExpireAt: time.Time{},
		Get:      false,
		KeepTTL:  false,
	}).Result()
	if err != nil {
		return nil, err
	}

	if v != "" {
		msg := &{{$pairSpecs.ValueSpecs.MessageName}}{}
		err = msg.unmarshal(v)
		if err != nil {
			return nil, err
		}
		return msg, nil
	}

	return nil, nil
}

func (s *featureXStorage) Delete(ctx context.Context, key *{{$pairSpecs.KeySpecs.MessageName}}) error {

	k, err := key.marshal()
	if err != nil {
		return err
	}

	_, err = s.r.Del(ctx, k).Result()
	return err
}

// message marshallers

func (msg *{{$pairSpecs.KeySpecs.MessageName}}) marshal() (string, error) {
    // TODO
	v := fmt.Sprintf("%s:%s", "feature-x", "feature_x_enable")

	return v, nil
}

func (msg *{{$pairSpecs.ValueSpecs.MessageName}}) marshal() (string, error) {
	v, err := protojson.MarshalOptions{}.Marshal(msg)
	if err != nil {
		return "", err
	}

	return string(v), nil
}

func (msg *{{$pairSpecs.ValueSpecs.MessageName}}) unmarshal(value string) error {
	return protojson.UnmarshalOptions{}.Unmarshal([]byte(value), msg)
}

{{end}}
