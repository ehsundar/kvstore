// Code generated by protoc-gen-go-kvstore . DO NOT EDIT.

package balance

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/ehsundar/kvstore"
	"github.com/redis/go-redis/v9"
	"google.golang.org/protobuf/encoding/protojson"
)

// generated code for Balance
// storage interface

type BalanceKVStore interface {
	Get(context.Context, *BalanceKey, ...kvstore.GetOption) (float64, error)
	Set(context.Context, *BalanceKey,
		float64, ...kvstore.SetOption) (float64, error)
	Del(context.Context, *BalanceKey) error

	Incr(context.Context, *BalanceKey, float64, ...kvstore.IncrOption) (float64, error)
}

// storage construction

func NewBalanceStore(r redis.Cmdable, opts ...kvstore.InitOption) BalanceKVStore {

	oc := kvstore.InitOptionContext{}
	for _, opt := range opts {
		opt(&oc)
	}

	return &balanceStorage{
		r:    r,
		opts: oc,
	}
}

// storage implementation

type balanceStorage struct {
	r    redis.Cmdable
	opts kvstore.InitOptionContext
}

func (s *balanceStorage) Get(
	ctx context.Context, key *BalanceKey, opts ...kvstore.GetOption) (float64, error) {

	var err error

	o := kvstore.GetOptionContext{}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return 0, err
	}

	var v string
	switch {
	case o.Del:
		v, err = s.r.GetDel(ctx, k).Result()
	case o.TTL != 0:
		v, err = s.r.GetEx(ctx, k, o.TTL).Result()
	case !o.ExAt.IsZero():
		// TODO: PR to go-redis for exAt
		err = errors.New("exat is not supported by go-redis")
	default:
		v, err = s.r.Get(ctx, k).Result()
	}

	if err != nil {
		return 0, err
	}

	return strconv.ParseFloat(v, 64)

}

func (s *balanceStorage) Set(ctx context.Context, key *BalanceKey,
	value float64, opts ...kvstore.SetOption) (float64, error) {

	o := kvstore.SetOptionContext{
		Get:     true,
		KeepTTL: true,
	}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return 0, err
	}

	mv := fmt.Sprintf("%v", value)
	v, err := s.r.SetArgs(ctx, k, mv, redis.SetArgs{
		Mode:     o.Mode,
		TTL:      o.TTL,
		ExpireAt: o.ExAt,
		Get:      o.Get,
		KeepTTL:  o.KeepTTL,
	}).Result()
	if err != nil && !errors.Is(err, redis.Nil) {
		return 0, err
	}

	if v != "" && v != "OK" {

		return strconv.ParseFloat(v, 64)

	}

	return 0, nil
}

func (s *balanceStorage) Del(ctx context.Context, key *BalanceKey) error {

	k, err := key.marshal()
	if err != nil {
		return err
	}

	_, err = s.r.Del(ctx, k).Result()
	return err
}

func (s *balanceStorage) Incr(ctx context.Context,
	key *BalanceKey, by float64, opts ...kvstore.IncrOption) (float64, error) {

	o := kvstore.IncrOptionContext{}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return 0, err
	}

	v, err := s.r.IncrByFloat(ctx, k, by).Result()
	if err != nil {
		return 0, err
	}

	switch {
	case o.TTL != 0:
		if o.KeepTTL {
			_, err = s.r.ExpireNX(ctx, k, o.TTL).Result()
		} else {
			_, err = s.r.Expire(ctx, k, o.TTL).Result()
		}
	case !o.ExAt.IsZero():
		_, err = s.r.ExpireAt(ctx, k, o.ExAt).Result()
	}

	return v, err
}

// message marshallers

func (msg *BalanceKey) marshal() (string, error) {

	v := fmt.Sprintf("balance:%v", msg.Username)

	return v, nil
}

func (msg *BalanceValue) marshal() (string, error) {
	v, err := protojson.MarshalOptions{}.Marshal(msg)
	if err != nil {
		return "", err
	}

	return string(v), nil
}

func (msg *BalanceValue) unmarshal(value string) error {
	return protojson.UnmarshalOptions{}.Unmarshal([]byte(value), msg)
}
