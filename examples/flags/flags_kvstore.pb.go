// Code generated by protoc-gen-go-kvstore . DO NOT EDIT.

package flags

import (
	"context"
	"errors"
	"fmt"

	"github.com/ehsundar/kvstore"
	"github.com/redis/go-redis/v9"
	"google.golang.org/protobuf/encoding/protojson"
)

// generated code for Flag
// storage interface

type FlagKVStore interface {
	Get(context.Context, *FlagKey, ...kvstore.GetOption) (*FlagValue, error)
	Set(context.Context, *FlagKey,
		*FlagValue, ...kvstore.SetOption) (*FlagValue, error)
	Del(context.Context, *FlagKey) error
}

// storage construction

func NewFlagStore(r redis.Cmdable, opts ...kvstore.InitOption) FlagKVStore {

	oc := kvstore.InitOptionContext{}
	for _, opt := range opts {
		opt(&oc)
	}

	return &flagStorage{
		r:    r,
		opts: oc,
	}
}

// storage implementation

type flagStorage struct {
	r    redis.Cmdable
	opts kvstore.InitOptionContext
}

func (s *flagStorage) Get(
	ctx context.Context, key *FlagKey, opts ...kvstore.GetOption) (*FlagValue, error) {

	var err error

	o := kvstore.GetOptionContext{}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	var v string
	switch {
	case o.Del:
		v, err = s.r.GetDel(ctx, k).Result()
	case o.TTL != 0:
		v, err = s.r.GetEx(ctx, k, o.TTL).Result()
	case !o.ExAt.IsZero():
		// TODO: PR to go-redis for exAt
		err = errors.New("exat is not supported by go-redis")
	default:
		v, err = s.r.Get(ctx, k).Result()
	}

	if err != nil {
		return nil, err
	}

	msg := &FlagValue{}
	err = msg.unmarshal(v)
	if err != nil {
		return nil, err
	}

	return msg, nil
}

func (s *flagStorage) Set(ctx context.Context, key *FlagKey,
	value *FlagValue, opts ...kvstore.SetOption) (*FlagValue, error) {

	o := kvstore.SetOptionContext{
		Get:     true,
		KeepTTL: true,
	}
	for _, opt := range opts {
		opt(&o)
	}

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	mv, err := value.marshal()
	if err != nil {
		return nil, err
	}

	v, err := s.r.SetArgs(ctx, k, mv, redis.SetArgs{
		Mode:     o.Mode,
		TTL:      o.TTL,
		ExpireAt: o.ExAt,
		Get:      o.Get,
		KeepTTL:  o.KeepTTL,
	}).Result()
	if err != nil && !errors.Is(err, redis.Nil) {
		return nil, err
	}

	if v != "" {
		msg := &FlagValue{}
		err = msg.unmarshal(v)
		if err != nil {
			return nil, err
		}
		return msg, nil
	}

	return nil, nil
}

func (s *flagStorage) Del(ctx context.Context, key *FlagKey) error {

	k, err := key.marshal()
	if err != nil {
		return err
	}

	_, err = s.r.Del(ctx, k).Result()
	return err
}

// message marshallers

func (msg *FlagKey) marshal() (string, error) {

	v := fmt.Sprintf("flag:flag")

	return v, nil
}

func (msg *FlagValue) marshal() (string, error) {
	v, err := protojson.MarshalOptions{}.Marshal(msg)
	if err != nil {
		return "", err
	}

	return string(v), nil
}

func (msg *FlagValue) unmarshal(value string) error {
	return protojson.UnmarshalOptions{}.Unmarshal([]byte(value), msg)
}
