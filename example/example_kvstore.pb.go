// Code generated by protoc-gen-go-kvstore. DO NOT EDIT.

package example

import (
	"context"
	"errors"
	"time"

	"github.com/redis/go-redis/v9"
	"google.golang.org/protobuf/encoding/protojson"
)

// generated code for FeatureX
// storage interface

type FeatureXKVStore interface {
	Get(context.Context, *StaticKey, ...FeatureXCallOption) (*ValueForStaticKey, error)
	Set(context.Context, *StaticKey,
		*ValueForStaticKey, ...FeatureXCallOption) (*ValueForStaticKey, error)
	Del(context.Context, *StaticKey) error
}

type featureXCallOptionContext struct{}

type FeatureXCallOption func(o *featureXCallOptionContext)

// storage construction

func NewFeatureXStore(r *redis.Client, opts ...featureXOption) FeatureXKVStore {
	oc := featureXOptionContext{}

	for _, opt := range opts {
		opt(&oc)
	}

	return &featureXStorage{
		r:    r,
		opts: oc,
	}
}

type featureXOptionContext struct{}

type featureXOption func(o *featureXOptionContext)

// storage implementation

type featureXStorage struct {
	r    *redis.Client
	opts featureXOptionContext
}

func (s *featureXStorage) Get(
	ctx context.Context, key *StaticKey, opts ...FeatureXCallOption) (*ValueForStaticKey, error) {

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	v, err := s.r.Get(ctx, k).Result()
	if err != nil {
		return nil, err
	}

	msg := &ValueForStaticKey{}
	err = msg.unmarshal(v)
	if err != nil {
		return nil, err
	}

	return msg, nil
}

func (s *featureXStorage) Set(ctx context.Context, key *StaticKey,
	value *ValueForStaticKey, opts ...FeatureXCallOption) (*ValueForStaticKey, error) {

	k, err := key.marshal()
	if err != nil {
		return nil, err
	}

	mv, err := value.marshal()
	if err != nil {
		return nil, err
	}

	v, err := s.r.SetArgs(ctx, k, mv, redis.SetArgs{
		Mode:     "",
		TTL:      0,
		ExpireAt: time.Time{},
		Get:      true,
		KeepTTL:  false,
	}).Result()
	if err != nil && !errors.Is(err, redis.Nil) {
		return nil, err
	}

	if v != "" {
		msg := &ValueForStaticKey{}
		err = msg.unmarshal(v)
		if err != nil {
			return nil, err
		}
		return msg, nil
	}

	return nil, nil
}

func (s *featureXStorage) Del(ctx context.Context, key *StaticKey) error {

	k, err := key.marshal()
	if err != nil {
		return err
	}

	_, err = s.r.Del(ctx, k).Result()
	return err
}

// message marshallers

func (msg *StaticKey) marshal() (string, error) {

	v := "feature-x:feature_x_enabled"

	return v, nil
}

func (msg *ValueForStaticKey) marshal() (string, error) {
	v, err := protojson.MarshalOptions{}.Marshal(msg)
	if err != nil {
		return "", err
	}

	return string(v), nil
}

func (msg *ValueForStaticKey) unmarshal(value string) error {
	return protojson.UnmarshalOptions{}.Unmarshal([]byte(value), msg)
}
